Testing Village:
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 8 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 8 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 8 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 8 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 10 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 10 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 5 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 3 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 2 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 9 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 1 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 7 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 7 to 4... TEST FAILED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
File 'dominion.c'
Lines executed:25.97% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int execute_adventurer(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:    9:{
    #####:   10:  int currentPlayer = whoseTurn(state);
    #####:   11:  int drawntreasure = 0;
    #####:   12:  int cardDrawn = 0;
        -:   13:  int temphand[MAX_HAND];
    #####:   14:  int z = 0;// this is the counter for the temp hand  
        -:   15:  
    #####:   16:  while(drawntreasure<2){
    #####:   17:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   18:       shuffle(currentPlayer, state);
        -:   19:    }
    #####:   20:    drawCard(currentPlayer, state);
    #####:   21:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   22:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   23:       drawntreasure++;
        -:   24:    else{
    #####:   25:       temphand[z]=cardDrawn;
    #####:   26:       state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   27:       z++;
        -:   28:    }
        -:   29: }
    #####:   30: while(z-1>=0){
    #####:   31:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   32:    z=z-1;
        -:   33: }
    #####:   34: return 0;
        -:   35:
        -:   36:}
        -:   37:
    #####:   38:int execute_council_room(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:   39:{
    #####:   40:  int i = 0;  
    #####:   41:  int currentPlayer = whoseTurn(state);
        -:   42:   //+4 Cards
    #####:   43:	 for (i = 0; i < 4; i++)
        -:   44:	 {
    #####:   45:	    drawCard(currentPlayer, state);
        -:   46:	 }
        -:   47:
        -:   48:	 //+1 Buy
    #####:   49:	 state->numBuys++;
        -:   50:
        -:   51:	 //Each other player draws a card
    #####:   52:	 for (i = 0; i < 4; i++) //BUG in line
        -:   53:	 {
    #####:   54:	    if ( i != currentPlayer )
        -:   55:	    {
    #####:   56:	       drawCard(i, state);
        -:   57:	    }
        -:   58:	 }
        -:   59:
        -:   60:	 //put played card in played card pile
    #####:   61:	 discardCard(handPos, currentPlayer, state, 0);
        -:   62:
    #####:   63:	 return 0;
        -:   64:}
        -:   65:
      100:   66:int execute_smithy(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:   67:{
      100:   68:  int i = 0;  
      100:   69:  int currentPlayer = whoseTurn(state);
        -:   70:  //+3 Cards
      500:   71:  for (i = 0; i <= 3; i++) //BUG in line
        -:   72:  {
      400:   73:    drawCard(currentPlayer, state);
        -:   74:  }
        -:   75:
        -:   76:  //discard card from hand
      100:   77:  discardCard(handPos, currentPlayer, state, 0);
      100:   78:  return 0;
        -:   79:}
        -:   80:
    #####:   81:int execute_embargo(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:   82:{
    #####:   83:  int currentPlayer = whoseTurn(state);
        -:   84:    
        -:   85:	 //+2 Coins
    #####:   86:	 state->coins = state->coins + 2;
        -:   87:   
        -:   88:      //see if selected pile is in play
    #####:   89:      if ( state->supplyCount[choice1] == -1 )
        -:   90:      {
    #####:   91:         return -1;
        -:   92:      }
        -:   93:   
        -:   94:      //add embargo token to selected supply pile
    #####:   95:      state->embargoTokens[choice1]++;
        -:   96:   
        -:   97:      //trash card
    #####:   98:      discardCard(handPos, currentPlayer, state, 0); //BUG in this line	
    #####:   99:      return 0;
        -:  100:}
        -:  101:
    #####:  102:int execute_salvager(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  103:{
    #####:  104:  int currentPlayer = whoseTurn(state);
        -:  105:
        -:  106:	 //+1 buy
    #####:  107:	 state->numBuys++;
        -:  108:   
    #####:  109:      if (choice1)
        -:  110:      {
        -:  111:         //gain coins equal to trashed card
    #####:  112:         state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  113:         //trash card
    #####:  114:         discardCard(choice1, currentPlayer, state, 1);	
        -:  115:      }
        -:  116:   
        -:  117:      //discard card
    #####:  118:      discardCard(handPos, currentPlayer, state, 0);
    #####:  119:      return 0;
        -:  120:}
        -:  121:
        -:  122:
        -:  123:
    12000:  124:int compare(const void* a, const void* b) {
    12000:  125:   if (*(int*)a > *(int*)b)
    #####:  126:      return 1;
    12000:  127:   if (*(int*)a < *(int*)b)
     3200:  128:      return -1;
     8800:  129:   return 0;
        -:  130:}
        -:  131:
      200:  132:struct gameState* newGame() {
      200:  133:   struct gameState* g = malloc(sizeof(struct gameState));
      200:  134:   return g;
        -:  135:}
        -:  136:
      200:  137:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  138:      int k8, int k9, int k10) {
      200:  139:   int* k = malloc(10 * sizeof(int));
      200:  140:   k[0] = k1;
      200:  141:   k[1] = k2;
      200:  142:   k[2] = k3;
      200:  143:   k[3] = k4;
      200:  144:   k[4] = k5;
      200:  145:   k[5] = k6;
      200:  146:   k[6] = k7;
      200:  147:   k[7] = k8;
      200:  148:   k[8] = k9;
      200:  149:   k[9] = k10;
      200:  150:   return k;
        -:  151:}
        -:  152:
      200:  153:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  154:      struct gameState *state) {
        -:  155:
        -:  156:   int i;
        -:  157:   int j;
        -:  158:   int it;			
        -:  159:   //set up random number generator
      200:  160:   SelectStream(1);
      200:  161:   PutSeed((long)randomSeed);
        -:  162:
        -:  163:   //check number of players
      200:  164:   if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  165:   {
    #####:  166:      return -1;
        -:  167:   }
        -:  168:
        -:  169:   //set number of players
      200:  170:   state->numPlayers = numPlayers;
        -:  171:
        -:  172:   //check selected kingdom cards are different
     2200:  173:   for (i = 0; i < 10; i++)
        -:  174:   {
    22000:  175:      for (j = 0; j < 10; j++)
        -:  176:      {
    20000:  177:	 if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  178:	 {
    #####:  179:	    return -1;
        -:  180:	 }
        -:  181:      }
        -:  182:   }
        -:  183:
        -:  184:
        -:  185:   //initialize supply
        -:  186:   ///////////////////////////////
        -:  187:
        -:  188:   //set number of Curse cards
      200:  189:   if (numPlayers == 2)
        -:  190:   {
    #####:  191:      state->supplyCount[curse] = 10;
        -:  192:   }
      200:  193:   else if (numPlayers == 3)
        -:  194:   {
    #####:  195:      state->supplyCount[curse] = 20;
        -:  196:   }
        -:  197:   else
        -:  198:   {
      200:  199:      state->supplyCount[curse] = 30;
        -:  200:   }
        -:  201:
        -:  202:   //set number of Victory cards
      200:  203:   if (numPlayers == 2)
        -:  204:   {
    #####:  205:      state->supplyCount[estate] = 8;
    #####:  206:      state->supplyCount[duchy] = 8;
    #####:  207:      state->supplyCount[province] = 8;
        -:  208:   }
        -:  209:   else
        -:  210:   {
      200:  211:      state->supplyCount[estate] = 12;
      200:  212:      state->supplyCount[duchy] = 12;
      200:  213:      state->supplyCount[province] = 12;
        -:  214:   }
        -:  215:
        -:  216:   //set number of Treasure cards
      200:  217:   state->supplyCount[copper] = 60 - (7 * numPlayers);
      200:  218:   state->supplyCount[silver] = 40;
      200:  219:   state->supplyCount[gold] = 30;
        -:  220:
        -:  221:   //set number of Kingdom cards
     4200:  222:   for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  223:   {
    42000:  224:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  225:      {
    38800:  226:	 if (kingdomCards[j] == i)
        -:  227:	 {
        -:  228:	    //check if card is a 'Victory' Kingdom card
      800:  229:	    if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  230:	    {
      400:  231:	       if (numPlayers == 2){ 
    #####:  232:		  state->supplyCount[i] = 8; 
        -:  233:	       }
      200:  234:	       else{ state->supplyCount[i] = 12; }
        -:  235:	    }
        -:  236:	    else
        -:  237:	    {
      600:  238:	       state->supplyCount[i] = 10;
        -:  239:	    }
      800:  240:	    break;
        -:  241:	 }
        -:  242:	 else    //card is not in the set choosen for the game
        -:  243:	 {
    38000:  244:	    state->supplyCount[i] = -1;
        -:  245:	 }
        -:  246:      }
        -:  247:
        -:  248:   }
        -:  249:
        -:  250:   ////////////////////////
        -:  251:   //supply intilization complete
        -:  252:
        -:  253:   //set player decks
     1000:  254:   for (i = 0; i < numPlayers; i++)
        -:  255:   {
      800:  256:      state->deckCount[i] = 0;
     3200:  257:      for (j = 0; j < 3; j++)
        -:  258:      {
     2400:  259:	 state->deck[i][j] = estate;
     2400:  260:	 state->deckCount[i]++;
        -:  261:      }
     6400:  262:      for (j = 3; j < 10; j++)
        -:  263:      {
     5600:  264:	 state->deck[i][j] = copper;
     5600:  265:	 state->deckCount[i]++;		
        -:  266:      }
        -:  267:   }
        -:  268:
        -:  269:   //shuffle player decks
     1000:  270:   for (i = 0; i < numPlayers; i++)
        -:  271:   {
      800:  272:      if ( shuffle(i, state) < 0 )
        -:  273:      {
    #####:  274:	 return -1;
        -:  275:      }
        -:  276:   }
        -:  277:
        -:  278:   //draw player hands
     1000:  279:   for (i = 0; i < numPlayers; i++)
        -:  280:   {  
        -:  281:      //initialize hand size to zero
      800:  282:      state->handCount[i] = 0;
      800:  283:      state->discardCount[i] = 0;
        -:  284:      //draw 5 cards
        -:  285:      // for (j = 0; j < 5; j++)
        -:  286:      //	{
        -:  287:      //	  drawCard(i, state);
        -:  288:      //	}
        -:  289:   }
        -:  290:
        -:  291:   //set embargo tokens to 0 for all supply piles
     5600:  292:   for (i = 0; i <= treasure_map; i++)
        -:  293:   {
     5400:  294:      state->embargoTokens[i] = 0;
        -:  295:   }
        -:  296:
        -:  297:   //initialize first player's turn
      200:  298:   state->outpostPlayed = 0;
      200:  299:   state->phase = 0;
      200:  300:   state->numActions = 1;
      200:  301:   state->numBuys = 1;
      200:  302:   state->playedCardCount = 0;
      200:  303:   state->whoseTurn = 0;
      200:  304:   state->handCount[state->whoseTurn] = 0;
        -:  305:   //int it; move to top
        -:  306:
        -:  307:   //Moved draw cards to here, only drawing at the start of a turn
     1200:  308:   for (it = 0; it < 5; it++){
     1000:  309:      drawCard(state->whoseTurn, state);
        -:  310:   }
        -:  311:
      200:  312:   updateCoins(state->whoseTurn, state, 0);
        -:  313:
      200:  314:   return 0;
        -:  315:}
        -:  316:
      800:  317:int shuffle(int player, struct gameState *state) {
        -:  318:
        -:  319:
        -:  320:   int newDeck[MAX_DECK];
      800:  321:   int newDeckPos = 0;
        -:  322:   int card;
        -:  323:   int i;
        -:  324:
      800:  325:   if (state->deckCount[player] < 1)
    #####:  326:      return -1;
      800:  327:   qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  328:   /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  329:
     9600:  330:   while (state->deckCount[player] > 0) {
     8000:  331:      card = floor(Random() * state->deckCount[player]);
     8000:  332:      newDeck[newDeckPos] = state->deck[player][card];
     8000:  333:      newDeckPos++;
    26690:  334:      for (i = card; i < state->deckCount[player]-1; i++) {
    18690:  335:	 state->deck[player][i] = state->deck[player][i+1];
        -:  336:      }
     8000:  337:      state->deckCount[player]--;
        -:  338:   }
     8800:  339:   for (i = 0; i < newDeckPos; i++) {
     8000:  340:      state->deck[player][i] = newDeck[i];
     8000:  341:      state->deckCount[player]++;
        -:  342:   }
        -:  343:
      800:  344:   return 0;
        -:  345:}
        -:  346:
    #####:  347:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  348:{	
        -:  349:   int card;
    #####:  350:   int coin_bonus = 0; 		//tracks coins gain from actions
        -:  351:
        -:  352:   //check if it is the right phase
    #####:  353:   if (state->phase != 0)
        -:  354:   {
    #####:  355:      return -1;
        -:  356:   }
        -:  357:
        -:  358:   //check if player has enough actions
    #####:  359:   if ( state->numActions < 1 )
        -:  360:   {
    #####:  361:      return -1;
        -:  362:   }
        -:  363:
        -:  364:   //get card played
    #####:  365:   card = handCard(handPos, state);
        -:  366:
        -:  367:   //check if selected card is an action
    #####:  368:   if ( card < adventurer || card > treasure_map )
        -:  369:   {
    #####:  370:      return -1;
        -:  371:   }
        -:  372:
        -:  373:   //play card
    #####:  374:   if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  375:   {
    #####:  376:      return -1;
        -:  377:   }
        -:  378:
        -:  379:   //reduce number of actions
    #####:  380:   state->numActions--;
        -:  381:
        -:  382:   //update coins (Treasure cards may be added with card draws)
    #####:  383:   updateCoins(state->whoseTurn, state, coin_bonus);
        -:  384:
    #####:  385:   return 0;
        -:  386:}
        -:  387:
    #####:  388:int buyCard(int supplyPos, struct gameState *state) {
        -:  389:   int who;
        -:  390:   if (DEBUG){
        -:  391:      printf("Entering buyCard...\n");
        -:  392:   }
        -:  393:
        -:  394:   // I don't know what to do about the phase thing.
        -:  395:
    #####:  396:   who = state->whoseTurn;
        -:  397:
    #####:  398:   if (state->numBuys < 1){
        -:  399:      if (DEBUG)
        -:  400:	 printf("You do not have any buys left\n");
    #####:  401:      return -1;
    #####:  402:   } else if (supplyCount(supplyPos, state) <1){
        -:  403:      if (DEBUG)
        -:  404:	 printf("There are not any of that type of card left\n");
    #####:  405:      return -1;
    #####:  406:   } else if (state->coins < getCost(supplyPos)){
        -:  407:      if (DEBUG) 
        -:  408:	 printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  409:      return -1;
        -:  410:   } else {
    #####:  411:      state->phase=1;
        -:  412:      //state->supplyCount[supplyPos]--;
    #####:  413:      gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  414:
    #####:  415:      state->coins = (state->coins) - (getCost(supplyPos));
    #####:  416:      state->numBuys--;
        -:  417:      if (DEBUG)
        -:  418:	 printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  419:   }
        -:  420:
        -:  421:   //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  422:   //state->discardCount[who]++;
        -:  423:
    #####:  424:   return 0;
        -:  425:}
        -:  426:
    #####:  427:int numHandCards(struct gameState *state) {
    #####:  428:   return state->handCount[ whoseTurn(state) ];
        -:  429:}
        -:  430:
    #####:  431:int handCard(int handPos, struct gameState *state) {
    #####:  432:   int currentPlayer = whoseTurn(state);
    #####:  433:   return state->hand[currentPlayer][handPos];
        -:  434:}
        -:  435:
     1800:  436:int supplyCount(int card, struct gameState *state) {
     1800:  437:   return state->supplyCount[card];
        -:  438:}
        -:  439:
    #####:  440:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  441:   int i;
    #####:  442:   int count = 0;
        -:  443:
    #####:  444:   for (i = 0; i < state->deckCount[player]; i++)
        -:  445:   {
    #####:  446:      if (state->deck[player][i] == card) count++;
        -:  447:   }
        -:  448:
    #####:  449:   for (i = 0; i < state->handCount[player]; i++)
        -:  450:   {
    #####:  451:      if (state->hand[player][i] == card) count++;
        -:  452:   }
        -:  453:
    #####:  454:   for (i = 0; i < state->discardCount[player]; i++)
        -:  455:   {
    #####:  456:      if (state->discard[player][i] == card) count++;
        -:  457:   }
        -:  458:
    #####:  459:   return count;
        -:  460:}
        -:  461:
      300:  462:int whoseTurn(struct gameState *state) {
      300:  463:   return state->whoseTurn;
        -:  464:}
        -:  465:
    #####:  466:int endTurn(struct gameState *state) {
        -:  467:   int k;
        -:  468:   int i;
    #####:  469:   int currentPlayer = whoseTurn(state);
        -:  470:
        -:  471:   //Discard hand
    #####:  472:   for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  473:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  474:      state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  475:   }
    #####:  476:   state->handCount[currentPlayer] = 0;//Reset hand count
        -:  477:
        -:  478:   //Code for determining the player
    #####:  479:   if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  480:      state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  481:   }
        -:  482:   else{
    #####:  483:      state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  484:   }
        -:  485:
    #####:  486:   state->outpostPlayed = 0;
    #####:  487:   state->phase = 0;
    #####:  488:   state->numActions = 1;
    #####:  489:   state->coins = 0;
    #####:  490:   state->numBuys = 1;
    #####:  491:   state->playedCardCount = 0;
    #####:  492:   state->handCount[state->whoseTurn] = 0;
        -:  493:
        -:  494:   //int k; move to top
        -:  495:   //Next player draws hand
    #####:  496:   for (k = 0; k < 5; k++){
    #####:  497:      drawCard(state->whoseTurn, state);//Draw a card
        -:  498:   }
        -:  499:
        -:  500:   //Update money
    #####:  501:   updateCoins(state->whoseTurn, state , 0);
        -:  502:
    #####:  503:   return 0;
        -:  504:}
        -:  505:
    #####:  506:int isGameOver(struct gameState *state) {
        -:  507:   int i;
        -:  508:   int j;
        -:  509:
        -:  510:   //if stack of Province cards is empty, the game ends
    #####:  511:   if (state->supplyCount[province] == 0)
        -:  512:   {
    #####:  513:      return 1;
        -:  514:   }
        -:  515:
        -:  516:   //if three supply pile are at 0, the game ends
    #####:  517:   j = 0;
    #####:  518:   for (i = 0; i < 25; i++)
        -:  519:   {
    #####:  520:      if (state->supplyCount[i] == 0)
        -:  521:      {
    #####:  522:	 j++;
        -:  523:      }
        -:  524:   }
    #####:  525:   if ( j >= 3)
        -:  526:   {
    #####:  527:      return 1;
        -:  528:   }
        -:  529:
    #####:  530:   return 0;
        -:  531:}
        -:  532:
    #####:  533:int scoreFor (int player, struct gameState *state) {
        -:  534:
        -:  535:   int i;
    #####:  536:   int score = 0;
        -:  537:   //score from hand
    #####:  538:   for (i = 0; i < state->handCount[player]; i++)
        -:  539:   {
    #####:  540:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  541:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  542:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  543:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  544:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  545:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  546:   }
        -:  547:
        -:  548:   //score from discard
    #####:  549:   for (i = 0; i < state->discardCount[player]; i++)
        -:  550:   {
    #####:  551:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  552:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  553:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  554:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  555:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  556:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  557:   }
        -:  558:
        -:  559:   //score from deck
    #####:  560:   for (i = 0; i < state->discardCount[player]; i++)
        -:  561:   {
    #####:  562:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  563:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  564:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  565:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  566:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  567:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  568:   }
        -:  569:
    #####:  570:   return score;
        -:  571:}
        -:  572:
    #####:  573:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  574:   int i;	
        -:  575:   int j;
        -:  576:   int highScore;
        -:  577:   int currentPlayer;
        -:  578:
        -:  579:   //get score for each player
    #####:  580:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  581:   {
        -:  582:      //set unused player scores to -9999
    #####:  583:      if (i >= state->numPlayers)
        -:  584:      {
    #####:  585:	 players[i] = -9999;
        -:  586:      }
        -:  587:      else
        -:  588:      {
    #####:  589:	 players[i] = scoreFor (i, state);
        -:  590:      }
        -:  591:   }
        -:  592:
        -:  593:   //find highest score
    #####:  594:   j = 0;
    #####:  595:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  596:   {
    #####:  597:      if (players[i] > players[j])
        -:  598:      {
    #####:  599:	 j = i;
        -:  600:      }
        -:  601:   }
    #####:  602:   highScore = players[j];
        -:  603:
        -:  604:   //add 1 to players who had less turns
    #####:  605:   currentPlayer = whoseTurn(state);
    #####:  606:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  607:   {
    #####:  608:      if ( players[i] == highScore && i > currentPlayer )
        -:  609:      {
    #####:  610:	 players[i]++;
        -:  611:      }
        -:  612:   }
        -:  613:
        -:  614:   //find new highest score
    #####:  615:   j = 0;
    #####:  616:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  617:   {
    #####:  618:      if ( players[i] > players[j] )
        -:  619:      {
    #####:  620:	 j = i;
        -:  621:      }
        -:  622:   }
    #####:  623:   highScore = players[j];
        -:  624:
        -:  625:   //set winners in array to 1 and rest to 0
    #####:  626:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  627:   {
    #####:  628:      if ( players[i] == highScore )
        -:  629:      {
    #####:  630:	 players[i] = 1;
        -:  631:      }
        -:  632:      else
        -:  633:      {
    #####:  634:	 players[i] = 0;
        -:  635:      }
        -:  636:   }
        -:  637:
    #####:  638:   return 0;
        -:  639:}
        -:  640:
     1600:  641:int drawCard(int player, struct gameState *state)
        -:  642:{	int count;
        -:  643:   int deckCounter;
     1600:  644:   if (state->deckCount[player] <= 0){//Deck is empty
        -:  645:
        -:  646:      //Step 1 Shuffle the discard pile back into a deck
        -:  647:      int i;
        -:  648:      //Move discard to deck
    #####:  649:      for (i = 0; i < state->discardCount[player];i++){
    #####:  650:	 state->deck[player][i] = state->discard[player][i];
    #####:  651:	 state->discard[player][i] = -1;
        -:  652:      }
        -:  653:
    #####:  654:      state->deckCount[player] = state->discardCount[player];
    #####:  655:      state->discardCount[player] = 0;//Reset discard
        -:  656:
        -:  657:      //Shufffle the deck
    #####:  658:      shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  659:
        -:  660:      if (DEBUG){//Debug statements
        -:  661:	 printf("Deck count now: %d\n", state->deckCount[player]);
        -:  662:      }
        -:  663:
    #####:  664:      state->discardCount[player] = 0;
        -:  665:
        -:  666:      //Step 2 Draw Card
    #####:  667:      count = state->handCount[player];//Get current player's hand count
        -:  668:
        -:  669:      if (DEBUG){//Debug statements
        -:  670:	 printf("Current hand count: %d\n", count);
        -:  671:      }
        -:  672:
    #####:  673:      deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  674:
    #####:  675:      if (deckCounter == 0)
    #####:  676:	 return -1;
        -:  677:
    #####:  678:      state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  679:      state->deckCount[player]--;
    #####:  680:      state->handCount[player]++;//Increment hand count
        -:  681:   }
        -:  682:
        -:  683:   else{
     1600:  684:      int count = state->handCount[player];//Get current hand count for player
        -:  685:      int deckCounter;
        -:  686:      if (DEBUG){//Debug statements
        -:  687:	 printf("Current hand count: %d\n", count);
        -:  688:      }
        -:  689:
     1600:  690:      deckCounter = state->deckCount[player];//Create holder for the deck count
     1600:  691:      state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1600:  692:      state->deckCount[player]--;
     1600:  693:      state->handCount[player]++;//Increment hand count
        -:  694:   }
        -:  695:
     1600:  696:   return 0;
        -:  697:}
        -:  698:
    #####:  699:int getCost(int cardNumber)
        -:  700:{
    #####:  701:   switch( cardNumber ) 
        -:  702:   {
        -:  703:      case curse:
    #####:  704:	 return 0;
        -:  705:      case estate:
    #####:  706:	 return 2;
        -:  707:      case duchy:
    #####:  708:	 return 5;
        -:  709:      case province:
    #####:  710:	 return 8;
        -:  711:      case copper:
    #####:  712:	 return 0;
        -:  713:      case silver:
    #####:  714:	 return 3;
        -:  715:      case gold:
    #####:  716:	 return 6;
        -:  717:      case adventurer:
    #####:  718:	 return 6;
        -:  719:      case council_room:
    #####:  720:	 return 5;
        -:  721:      case feast:
    #####:  722:	 return 4;
        -:  723:      case gardens:
    #####:  724:	 return 4;
        -:  725:      case mine:
    #####:  726:	 return 5;
        -:  727:      case remodel:
    #####:  728:	 return 4;
        -:  729:      case smithy:
    #####:  730:	 return 4;
        -:  731:      case village:
    #####:  732:	 return 3;
        -:  733:      case baron:
    #####:  734:	 return 4;
        -:  735:      case great_hall:
    #####:  736:	 return 3;
        -:  737:      case minion:
    #####:  738:	 return 5;
        -:  739:      case steward:
    #####:  740:	 return 3;
        -:  741:      case tribute:
    #####:  742:	 return 5;
        -:  743:      case ambassador:
    #####:  744:	 return 3;
        -:  745:      case cutpurse:
    #####:  746:	 return 4;
        -:  747:      case embargo: 
    #####:  748:	 return 2;
        -:  749:      case outpost:
    #####:  750:	 return 5;
        -:  751:      case salvager:
    #####:  752:	 return 4;
        -:  753:      case sea_hag:
    #####:  754:	 return 4;
        -:  755:      case treasure_map:
    #####:  756:	 return 4;
        -:  757:   }
        -:  758:
    #####:  759:   return -1;
        -:  760:}
        -:  761:
      200:  762:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  763:{
        -:  764:   int i;
        -:  765:   int j;
        -:  766:   int k;
        -:  767:   int x;
        -:  768:   int index;
      200:  769:   int currentPlayer = whoseTurn(state);
      200:  770:   int nextPlayer = currentPlayer + 1;
        -:  771:
      200:  772:   int tributeRevealedCards[2] = {-1, -1};
        -:  773:   int temphand[MAX_HAND];// moved above the if statement
      200:  774:   if (nextPlayer > (state->numPlayers - 1)){
    #####:  775:      nextPlayer = 0;
        -:  776:   }
        -:  777:
        -:  778:
        -:  779:   //uses switch to select card and perform actions
      200:  780:   switch( card ) 
        -:  781:   {
        -:  782:      case adventurer:
    #####:  783:        execute_adventurer(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  784:	 
        -:  785:
        -:  786:      case council_room:
    #####:  787:      execute_council_room(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  788:      
        -:  789:	
        -:  790:
        -:  791:      case feast:
        -:  792:	 //gain card with cost up to 5
        -:  793:	 //Backup hand
    #####:  794:	 for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  795:	    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:	    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:	 }
        -:  798:	 //Backup hand
        -:  799:
        -:  800:	 //Update Coins for Buy
    #####:  801:	 updateCoins(currentPlayer, state, 5);
    #####:  802:	 x = 1;//Condition to loop on
    #####:  803:	 while( x == 1) {//Buy one card
    #####:  804:	    if (supplyCount(choice1, state) <= 0){
        -:  805:	       if (DEBUG)
        -:  806:		  printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:	       if (DEBUG){
        -:  809:		  printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:	       }
        -:  811:	    }
    #####:  812:	    else if (state->coins < getCost(choice1)){
    #####:  813:	       printf("That card is too expensive!\n");
        -:  814:
        -:  815:	       if (DEBUG){
        -:  816:		  printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:	       }
        -:  818:	    }
        -:  819:	    else{
        -:  820:
        -:  821:	       if (DEBUG){
        -:  822:		  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	       }
        -:  824:
    #####:  825:	       gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  826:	       x = 0;//No more buying cards
        -:  827:
        -:  828:	       if (DEBUG){
        -:  829:		  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	       }
        -:  831:
        -:  832:	    }
        -:  833:	 }     
        -:  834:
        -:  835:	 //Reset Hand
    #####:  836:	 for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  837:	    state->hand[currentPlayer][i] = temphand[i];
    #####:  838:	    temphand[i] = -1;
        -:  839:	 }
        -:  840:	 //Reset Hand
        -:  841:
    #####:  842:	 return 0;
        -:  843:
        -:  844:      case gardens:
    #####:  845:	 return -1;
        -:  846:
        -:  847:      case mine:
    #####:  848:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:	 if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  851:	 {
    #####:  852:	    return -1;
        -:  853:	 }
        -:  854:
    #####:  855:	 if (choice2 > treasure_map || choice2 < curse)
        -:  856:	 {
    #####:  857:	    return -1;
        -:  858:	 }
        -:  859:
    #####:  860:	 if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  861:	 {
    #####:  862:	    return -1;
        -:  863:	 }
        -:  864:
    #####:  865:	 gainCard(choice2, state, 2, currentPlayer);
        -:  866:
        -:  867:	 //discard card from hand
    #####:  868:	 discardCard(handPos, currentPlayer, state, 0);
        -:  869:
        -:  870:	 //discard trashed card
    #####:  871:	 for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  872:	 {
    #####:  873:	    if (state->hand[currentPlayer][i] == j)
        -:  874:	    {
    #####:  875:	       discardCard(i, currentPlayer, state, 0);			
    #####:  876:	       break;
        -:  877:	    }
        -:  878:	 }
        -:  879:
    #####:  880:	 return 0;
        -:  881:
        -:  882:      case remodel:
    #####:  883:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:	 if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  886:	 {
    #####:  887:	    return -1;
        -:  888:	 }
        -:  889:
    #####:  890:	 gainCard(choice2, state, 0, currentPlayer);
        -:  891:
        -:  892:	 //discard card from hand
    #####:  893:	 discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:	 //discard trashed card
    #####:  896:	 for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:	 {
    #####:  898:	    if (state->hand[currentPlayer][i] == j)
        -:  899:	    {
    #####:  900:	       discardCard(i, currentPlayer, state, 0);			
    #####:  901:	       break;
        -:  902:	    }
        -:  903:	 }
        -:  904:
        -:  905:
    #####:  906:	 return 0;
        -:  907:
        -:  908:      case smithy:
      100:  909:        execute_smithy(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  910:      
        -:  911:
        -:  912:      case village:
        -:  913:	 //+1 Card
      200:  914:	 drawCard(currentPlayer, state);
        -:  915:
        -:  916:	 //+2 Actions
      200:  917:	 state->numActions = state->numActions + 2;
        -:  918:
        -:  919:	 //discard played card from hand
      200:  920:	 discardCard(handPos, currentPlayer, state, 0);
      200:  921:	 return 0;
        -:  922:
        -:  923:      case baron:
    #####:  924:	 state->numBuys++;//Increase buys by 1!
    #####:  925:	 if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  926:	    int p = 0;//Iterator for hand!
    #####:  927:	    int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	    while(card_not_discarded){
    #####:  929:	       if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  930:		  state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:		  state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:		  state->discardCount[currentPlayer]++;
    #####:  933:		  for (;p < state->handCount[currentPlayer]; p++){
    #####:  934:		     state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  935:		  }
    #####:  936:		  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:		  state->handCount[currentPlayer]--;
    #####:  938:		  card_not_discarded = 0;//Exit the loop
        -:  939:	       }
    #####:  940:	       else if (p > state->handCount[currentPlayer]){
        -:  941:		  if(DEBUG) {
        -:  942:		     printf("No estate cards in your hand, invalid choice\n");
        -:  943:		     printf("Must gain an estate if there are any\n");
        -:  944:		  }
    #####:  945:		  if (supplyCount(estate, state) > 0){
    #####:  946:		     gainCard(estate, state, 0, currentPlayer);
    #####:  947:		     state->supplyCount[estate]--;//Decrement estates
    #####:  948:		     if (supplyCount(estate, state) == 0){
    #####:  949:			isGameOver(state);
        -:  950:		     }
        -:  951:		  }
    #####:  952:		  card_not_discarded = 0;//Exit the loop
        -:  953:	       }
        -:  954:
        -:  955:	       else{
    #####:  956:		  p++;//Next card
        -:  957:	       }
        -:  958:	    }
        -:  959:	 }
        -:  960:
        -:  961:	 else{
    #####:  962:	    if (supplyCount(estate, state) > 0){
    #####:  963:	       gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  964:	       state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	       if (supplyCount(estate, state) == 0){
    #####:  966:		  isGameOver(state);
        -:  967:	       }
        -:  968:	    }
        -:  969:	 }
        -:  970:
        -:  971:
    #####:  972:	 return 0;
        -:  973:
        -:  974:      case great_hall:
        -:  975:	 //+1 Card
    #####:  976:	 drawCard(currentPlayer, state);
        -:  977:
        -:  978:	 //+1 Actions
    #####:  979:	 state->numActions++;
        -:  980:
        -:  981:	 //discard card from hand
    #####:  982:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  983:	 return 0;
        -:  984:
        -:  985:      case minion:
        -:  986:	 //+1 action
    #####:  987:	 state->numActions++;
        -:  988:
        -:  989:	 //discard card from hand
    #####:  990:	 discardCard(handPos, currentPlayer, state, 0);
        -:  991:
    #####:  992:	 if (choice1)		//+2 coins
        -:  993:	 {
    #####:  994:	    state->coins = state->coins + 2;
        -:  995:	 }
        -:  996:
    #####:  997:	 else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  998:	 {
        -:  999:	    //discard hand
    #####: 1000:	    while(numHandCards(state) > 0)
        -: 1001:	    {
    #####: 1002:	       discardCard(handPos, currentPlayer, state, 0);
        -: 1003:	    }
        -: 1004:
        -: 1005:	    //draw 4
    #####: 1006:	    for (i = 0; i < 4; i++)
        -: 1007:	    {
    #####: 1008:	       drawCard(currentPlayer, state);
        -: 1009:	    }
        -: 1010:
        -: 1011:	    //other players discard hand and redraw if hand size > 4
    #####: 1012:	    for (i = 0; i < state->numPlayers; i++)
        -: 1013:	    {
    #####: 1014:	       if (i != currentPlayer)
        -: 1015:	       {
    #####: 1016:		  if ( state->handCount[i] > 4 )
        -: 1017:		  {
        -: 1018:		     //discard hand
    #####: 1019:		     while( state->handCount[i] > 0 )
        -: 1020:		     {
    #####: 1021:			discardCard(handPos, i, state, 0);
        -: 1022:		     }
        -: 1023:
        -: 1024:		     //draw 4
    #####: 1025:		     for (j = 0; j < 4; j++)
        -: 1026:		     {
    #####: 1027:			drawCard(i, state);
        -: 1028:		     }
        -: 1029:		  }
        -: 1030:	       }
        -: 1031:	    }
        -: 1032:
        -: 1033:	 }
    #####: 1034:	 return 0;
        -: 1035:
        -: 1036:      case steward:
    #####: 1037:	 if (choice1 == 1)
        -: 1038:	 {
        -: 1039:	    //+2 cards
    #####: 1040:	    drawCard(currentPlayer, state);
    #####: 1041:	    drawCard(currentPlayer, state);
        -: 1042:	 }
    #####: 1043:	 else if (choice1 == 2)
        -: 1044:	 {
        -: 1045:	    //+2 coins
    #####: 1046:	    state->coins = state->coins + 2;
        -: 1047:	 }
        -: 1048:	 else
        -: 1049:	 {
        -: 1050:	    //trash 2 cards in hand
    #####: 1051:	    discardCard(choice2, currentPlayer, state, 1);
    #####: 1052:	    discardCard(choice3, currentPlayer, state, 1);
        -: 1053:	 }
        -: 1054:
        -: 1055:	 //discard card from hand
    #####: 1056:	 discardCard(handPos, currentPlayer, state, 0);
    #####: 1057:	 return 0;
        -: 1058:
        -: 1059:      case tribute:
    #####: 1060:	 if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1061:	    if (state->deckCount[nextPlayer] > 0){
    #####: 1062:	       tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	       state->deckCount[nextPlayer]--;
        -: 1064:	    }
    #####: 1065:	    else if (state->discardCount[nextPlayer] > 0){
    #####: 1066:	       tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1067:	       state->discardCount[nextPlayer]--;
        -: 1068:	    }
        -: 1069:	    else{
        -: 1070:	       //No Card to Reveal
        -: 1071:	       if (DEBUG){
        -: 1072:		  printf("No cards to reveal\n");
        -: 1073:	       }
        -: 1074:	    }
        -: 1075:	 }
        -: 1076:
        -: 1077:	 else{
    #####: 1078:	    if (state->deckCount[nextPlayer] == 0){
    #####: 1079:	       for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1080:		  state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1081:		  state->deckCount[nextPlayer]++;
    #####: 1082:		  state->discard[nextPlayer][i] = -1;
    #####: 1083:		  state->discardCount[nextPlayer]--;
        -: 1084:	       }
        -: 1085:
    #####: 1086:	       shuffle(nextPlayer,state);//Shuffle the deck
        -: 1087:	    } 
    #####: 1088:	    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1089:	    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1090:	    state->deckCount[nextPlayer]--;
    #####: 1091:	    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1092:	    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1093:	    state->deckCount[nextPlayer]--;
        -: 1094:	 }    
        -: 1095:
    #####: 1096:	 if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1097:	    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1098:	    state->playedCardCount++;
    #####: 1099:	    tributeRevealedCards[1] = -1;
        -: 1100:	 }
        -: 1101:
    #####: 1102:	 for (i = 0; i <= 2; i ++){
    #####: 1103:	    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1104:	       state->coins += 2;
        -: 1105:	    }
        -: 1106:
    #####: 1107:	    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1108:	       drawCard(currentPlayer, state);
    #####: 1109:	       drawCard(currentPlayer, state);
        -: 1110:	    }
        -: 1111:	    else{//Action Card
    #####: 1112:	       state->numActions = state->numActions + 2;
        -: 1113:	    }
        -: 1114:	 }
        -: 1115:
    #####: 1116:	 return 0;
        -: 1117:
        -: 1118:      case ambassador:
    #####: 1119:	 j = 0;		//used to check if player has enough cards to discard
        -: 1120:
    #####: 1121:	 if (choice2 > 2 || choice2 < 0)
        -: 1122:	 {
    #####: 1123:	    return -1;				
        -: 1124:	 }
        -: 1125:
    #####: 1126:	 if (choice1 == handPos)
        -: 1127:	 {
    #####: 1128:	    return -1;
        -: 1129:	 }
        -: 1130:
    #####: 1131:	 for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1132:	 {
    #####: 1133:	    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1134:	    {
    #####: 1135:	       j++;
        -: 1136:	    }
        -: 1137:	 }
    #####: 1138:	 if (j < choice2)
        -: 1139:	 {
    #####: 1140:	    return -1;				
        -: 1141:	 }
        -: 1142:
        -: 1143:	 if (DEBUG) 
        -: 1144:	    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1145:
        -: 1146:	 //increase supply count for choosen card by amount being discarded
    #####: 1147:	 state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1148:
        -: 1149:	 //each other player gains a copy of revealed card
    #####: 1150:	 for (i = 0; i < state->numPlayers; i++)
        -: 1151:	 {
    #####: 1152:	    if (i != currentPlayer)
        -: 1153:	    {
    #####: 1154:	       gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1155:	    }
        -: 1156:	 }
        -: 1157:
        -: 1158:	 //discard played card from hand
    #####: 1159:	 discardCard(handPos, currentPlayer, state, 0);			
        -: 1160:
        -: 1161:	 //trash copies of cards returned to supply
    #####: 1162:	 for (j = 0; j < choice2; j++)
        -: 1163:	 {
    #####: 1164:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1165:	    {
    #####: 1166:	       if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1167:	       {
    #####: 1168:		  discardCard(i, currentPlayer, state, 1);
    #####: 1169:		  break;
        -: 1170:	       }
        -: 1171:	    }
        -: 1172:	 }			
        -: 1173:
    #####: 1174:	 return 0;
        -: 1175:
        -: 1176:      case cutpurse:
        -: 1177:
    #####: 1178:	 updateCoins(currentPlayer, state, 2);
    #####: 1179:	 for (i = 0; i < state->numPlayers; i++)
        -: 1180:	 {
    #####: 1181:	    if (i != currentPlayer)
        -: 1182:	    {
    #####: 1183:	       for (j = 0; j < state->handCount[i]; j++)
        -: 1184:	       {
    #####: 1185:		  if (state->hand[i][j] == copper)
        -: 1186:		  {
    #####: 1187:		     discardCard(j, i, state, 0);
    #####: 1188:		     break;
        -: 1189:		  }
    #####: 1190:		  if (j == state->handCount[i])
        -: 1191:		  {
    #####: 1192:		     for (k = 0; k < state->handCount[i]; k++)
        -: 1193:		     {
        -: 1194:			if (DEBUG)
        -: 1195:			   printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1196:		     }	
    #####: 1197:		     break;
        -: 1198:		  }		
        -: 1199:	       }
        -: 1200:
        -: 1201:	    }
        -: 1202:
        -: 1203:	 }				
        -: 1204:
        -: 1205:	 //discard played card from hand
    #####: 1206:	 discardCard(handPos, currentPlayer, state, 0);			
        -: 1207:
    #####: 1208:	 return 0;
        -: 1209:
        -: 1210:
        -: 1211:      case embargo: 
    #####: 1212:        execute_embargo(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1213:    
        -: 1214:
        -: 1215:      case outpost:
        -: 1216:	 //set outpost flag
    #####: 1217:	 state->outpostPlayed++;
        -: 1218:
        -: 1219:	 //discard card
    #####: 1220:	 discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	 return 0;
        -: 1222:
        -: 1223:      case salvager:
    #####: 1224:       execute_salvager(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1225:      
        -: 1226:
        -: 1227:      case sea_hag:
    #####: 1228:	 for (i = 0; i < state->numPlayers; i++){
    #####: 1229:	    if (i != currentPlayer){
    #####: 1230:	       state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1231:	       state->discardCount[i]++;
    #####: 1232:	       state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1233:	    }
        -: 1234:	 }
    #####: 1235:	 return 0;
        -: 1236:
        -: 1237:      case treasure_map:
        -: 1238:	 //search hand for another treasure_map
    #####: 1239:	 index = -1;
    #####: 1240:	 for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1241:	 {
    #####: 1242:	    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1243:	    {
    #####: 1244:	       index = i;
    #####: 1245:	       break;
        -: 1246:	    }
        -: 1247:	 }
    #####: 1248:	 if (index > -1)
        -: 1249:	 {
        -: 1250:	    //trash both treasure cards
    #####: 1251:	    discardCard(handPos, currentPlayer, state, 1);
    #####: 1252:	    discardCard(index, currentPlayer, state, 1);
        -: 1253:
        -: 1254:	    //gain 4 Gold cards
    #####: 1255:	    for (i = 0; i < 4; i++)
        -: 1256:	    {
    #####: 1257:	       gainCard(gold, state, 1, currentPlayer);
        -: 1258:	    }
        -: 1259:
        -: 1260:	    //return success
    #####: 1261:	    return 1;
        -: 1262:	 }
        -: 1263:
        -: 1264:	 //no second treasure_map found in hand
    #####: 1265:	 return -1;
        -: 1266:   }
        -: 1267:
    #####: 1268:   return -1;
        -: 1269:}
        -: 1270:
      300: 1271:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1272:{
        -: 1273:
        -: 1274:   //if card is not trashed, added to Played pile 
      300: 1275:   if (trashFlag < 1)
        -: 1276:   {
        -: 1277:      //add card to played pile
      300: 1278:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      300: 1279:      state->playedCardCount++;
        -: 1280:   }
        -: 1281:
        -: 1282:   //set played card to -1
      300: 1283:   state->hand[currentPlayer][handPos] = -1;
        -: 1284:
        -: 1285:   //remove card from player's hand
      300: 1286:   if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1287:   {
        -: 1288:      //reduce number of cards in hand
       12: 1289:      state->handCount[currentPlayer]--;
        -: 1290:   }
      288: 1291:   else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1292:   {
        -: 1293:      //reduce number of cards in hand
    #####: 1294:      state->handCount[currentPlayer]--;
        -: 1295:   }
        -: 1296:   else 	
        -: 1297:   {
        -: 1298:      //replace discarded card with last card in hand
      288: 1299:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1300:      //set last card to -1
      288: 1301:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1302:      //reduce number of cards in hand
      288: 1303:      state->handCount[currentPlayer]--;
        -: 1304:   }
        -: 1305:
      300: 1306:   return 0;
        -: 1307:}
        -: 1308:
     1800: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1310:{
        -: 1311:   //Note: supplyPos is enum of choosen card
        -: 1312:
        -: 1313:   //check if supply pile is empty (0) or card is not used in game (-1)
     1800: 1314:   if ( supplyCount(supplyPos, state) < 1 )
        -: 1315:   {
    #####: 1316:      return -1;
        -: 1317:   }
        -: 1318:
        -: 1319:   //added card for [whoseTurn] current player:
        -: 1320:   // toFlag = 0 : add to discard
        -: 1321:   // toFlag = 1 : add to deck
        -: 1322:   // toFlag = 2 : add to hand
        -: 1323:
     1800: 1324:   if (toFlag == 1)
        -: 1325:   {
     1800: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1800: 1327:      state->deckCount[player]++;
        -: 1328:   }
    #####: 1329:   else if (toFlag == 2)
        -: 1330:   {
    #####: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1332:      state->handCount[player]++;
        -: 1333:   }
        -: 1334:   else
        -: 1335:   {
    #####: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1337:      state->discardCount[player]++;
        -: 1338:   }
        -: 1339:
        -: 1340:   //decrease number in supply pile
     1800: 1341:   state->supplyCount[supplyPos]--;
        -: 1342:
     1800: 1343:   return 0;
        -: 1344:}
        -: 1345:
      200: 1346:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1347:{
        -: 1348:   int i;
        -: 1349:
        -: 1350:   //reset coin count
      200: 1351:   state->coins = 0;
        -: 1352:
        -: 1353:   //add coins for each Treasure card in player's hand
     1200: 1354:   for (i = 0; i < state->handCount[player]; i++)
        -: 1355:   {
     1000: 1356:      if (state->hand[player][i] == copper)
        -: 1357:      {
      802: 1358:	 state->coins += 1;
        -: 1359:      }
      198: 1360:      else if (state->hand[player][i] == silver)
        -: 1361:      {
    #####: 1362:	 state->coins += 2;
        -: 1363:      }
      198: 1364:      else if (state->hand[player][i] == gold)
        -: 1365:      {
    #####: 1366:	 state->coins += 3;
        -: 1367:      }	
        -: 1368:   }	
        -: 1369:
        -: 1370:   //add bonus
      200: 1371:   state->coins += bonus;
        -: 1372:
      200: 1373:   return 0;
        -: 1374:}
        -: 1375:
        -: 1376:
        -: 1377://end of dominion.c
